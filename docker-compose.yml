version: '3'
services: # each service like domains/host names or some sorts
  # and we can refer tho them in order to access the service
  # that is hosted by the service
  postgres:
    image: 'postgres:latest'



#  redis:
#    image: 'redis:latest'
#  nginx:
#    restart: always
#    build:
#      dockerfile: Dockerfile.dev
#      context: ./nginx
#    ports:
#      - '3050:80'
##    A small number of students are hitting an edge case where the nginx upstream connection is failing after they run docker-compose up --build:
##
##    connect() failed (111: Connection refused) while connecting to upstream, client:[DOCKER INTERNAL IP], server:, request: "GET / HTTP/1.1", upstream: [NETWORK IP]
##
##    The solution they found was to add this to their nginx service in the docker-compose.yml file:
##
##      nginx:
##        depends_on:
##          - api
##          - client
#
#  api: # listen to 5000 - like backend.
#          # server are watching for traffic on port 5000
#    build:
#      dockerfile: Dockerfile.dev
#      context: ./server
#    volumes:
#      - /app/node_modules
#      - ./server:/app
#    # env vars do not stores inside container or wherever
#    # they are used in runtime
#    environment:
## all variables are used for Environment variables in Elastic Beanstalk
#      - REDIS_HOST=redis
## used host from amazon from ElastiCache Service -> Redis
#  # -> Primary Endpoint without ":6379'
#      - REDIS_PORT=6379
#      - PGUSER=postgres
## used value from Amazon (can be different, but not in this course)
#      - PGHOST=postgres
## used value from Amazon RDS Service -> Connect section -> Endpoint
#      - PDDATABASE=postgres
## sed value from Amazon database_name: fibvalues
#      - PGPASSWORD=postgres_password
## used value from Amazon (can be different, but not in this course)
#      - PGPORT=5432
#  client: # listen to 3000 - like frontend (create-react-app).
#          # client by default are watching for traffic on port 5000
#    build:
#      dockerfile: Dockerfile.dev
#      context: ./client
#    volumes:
#      - /app/node_modules
#      - ./client:/app
#  worker:
#    build:
#      - REDIS_HOST=redis
#      - REDIS_PORT=6379
#      dockerfile: Dockerfile.dev
#      context: ./worker
#    volumes:
#      - /app/node_modules
#      - ./worker:/app





